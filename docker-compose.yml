services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    hostname: redis


  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - backend_media:/app/media
      - backend_logs:/app/logs
      - backend_static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
    restart: unless-stopped
    depends_on:
      - backend
    env_file:
      - .env


  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A core worker -l info
    volumes:
      - backend_logs:/app/logs
      - backend_media:/app/media
    depends_on:
      - backend
      - redis
      - postgres
    env_file:
      - .env

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A core beat -l info
    volumes:
      - backend_logs:/app/logs
      - backend_media:/app/media
    depends_on:
      - backend
      - redis
      - postgres
    env_file:
      - .env


  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - backend_media:/var/www/backend/media
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - backend_static:/var/www/backend/static
    depends_on:
      - frontend
      - backend
    env_file:
      - .env

  
  certbot:
    image: certbot/certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  certbot-init:
    image: certbot/certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: ["certbot"]
    command: certonly --webroot -w /var/www/certbot --non-interactive --agree-tos
    profiles: ["init"]
networks:
  default:
    driver: bridge

volumes:
  backend_media:
  backend_static:
  backend_logs:
  postgres_data:
  postgres_backups:
  redis_data:
  certbot_data:
  certbot_www: